# -*- coding: utf-8 -*-
"""class PatientManager.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ogpa4Jx51bZMjXXZ4pswe1G0sUlK8jLZ
"""

class PatientManager():
  def __init__(self):
    self.patients = []
    self.read_patients_from_file()

  def add_patient_to_file(self):
    p = self.enter_patient_info()
    self.patients.append(p) # add Patient object to List

    self.write_list_of_patients_to_file()
    self.display_add_or_edit_message(p.id, "added")

  def display_patients_list(self):
    self.display_patient_headers()
    for patient in self.patients:
      self.display_patient_info(patient)

  def search_patient_by_id(self):
        pid = int(input("Enter the patient Id: "))
        for i in self.patients:
          if i.id == pid:
            self.display_patient_info(i)
            break
        else:
          print('Can\'t find the patient with the same id on the system')

  def patient_do_not_exist(self, value: str):
    print(f"Can't find the patient with the same {value} on the system")

  def process_patient_data(self, p: Patient,  value: str):
    if p != None:
      self.display_patient_headers()
      self.display_patient_info(p)
      return

    # calls the method when if block is not executed
    self.patient_do_not_exist(value)

  def display_patient_info(self, p: Patient):
    print(f"\n{p.id}\t{self.format_output_spacing(p.name)}{self.format_output_spacing(p.disease)}{self.format_output_spacing(p.gender)}{self.format_output_spacing(p.age, True)}")

  def display_patient_headers(self):
    print(f"ID\tName\t\tDisease\t\tGender\t\tAge")

  def format_patient_info_for_file(self, p: Patient):
    return f"{p.id}_{p.name}_{p.disease}_{p.gender}_{p.age}"

  def write_list_of_patients_to_file(self):
    header_line = self.read_patients_header_line_from_file()

    lines = [header_line]
    for p in self.patients:
        lines.append(f"{self.format_patient_info_for_file(p)}\n") # Add to the List

    self.write_list_to_file(lines)

  def read_patients_header_line_from_file(self) -> str:
    # Read and modify content in memory
    with open("patients.txt", 'r') as file:
      lines = file.readlines()  # Read all lines into a list

    return lines[0] # Return only the header line

  def write_list_to_file(self, lines):
    # Open a file in write mode. If the file doesn't exist, it will be created.
    with open("patients.txt", 'w') as file:
      # Write content to the file
      file.writelines(lines)

  def edit_patient_info_by_id(self, id: int):
    p = None
    for patient in self.patients:
      if patient.get_id() == id:
        p = patient

    if p == None:
      print(f"Cannot find patient with an id of {id}")
      return

    # when doctor exists, prompt to enter fields to update
    msg = "Enter new"

    name = input(f"{msg} name: ")
    disease = input(f"{msg} disease: ")
    gender = input(f"{msg} gender: ")
    age = int(input(f"{msg} age: "))

    # changing the values in the dr object also reflects the changes to the item in the list (self.patients)
    # since dr object is referencing the item in the list (self.patients)
    p.set_name(name)
    p.set_disease(disease)
    p.set_gender(gender)
    p.set_age(age)

    self.write_list_of_patients_to_file()
    self.display_add_or_edit_message(p.id, "edited")

  def display_add_or_edit_message(self, id: int, added_or_edit_note: str):
    print(f"Patient whose ID is {id} has been {added_or_edit_note}")

  def read_patients_from_file(self):
    # replace the content of open method with the path to the doctors.txt file
    with open("patients.txt", 'r') as file:
      next(file) # Skip the first line in the file as this contains the headers (e.g. id, name, etc.)

      # Iterate through the remaining lines
      line_values = []
      for line in file:
        # use split function to separate the data since it is connected by underscore _
        line_values = (line.strip()).split("_")

        p = Patient()
        p.set_id(int(line_values[0]))  # line_values[0] == id field
        p.set_name(line_values[1])     # line_values[1] == name field
        p.set_disease(line_values[2])  # line_values[2] == speciality field
        p.set_gender(line_values[3])   # line_values[3] == timing field
        p.set_age(int(line_values[4])) # line_values[4] == qualification field

        self.patients.append(p) # Add to List

  def format_output_spacing(self, value: str, is_last_field: bool = False):
    # when it's the last field, add single tab space
    if is_last_field:
        return f"{value}"

    if len(value) < 8:
      return f"{value}\t\t"

    return f"{value}\t"

  def enter_patient_info(self) -> Patient:
    msg = "Enter patient"

    id = int(input(f"{msg} ID: "))
    name = input(f"{msg} name: ")
    disease = input(f"{msg} disease: ")
    gender = input(f"{msg} gender: ")
    age = int(input(f"{msg} age: "))

    p = Patient()
    p.set_id(id)
    p.set_name(name)
    p.set_disease(disease)
    p.set_gender(gender)
    p.set_age(age)

    return p
